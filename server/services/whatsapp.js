const axios = require('axios');
const { createEvent } = require('../utils/events');

class WhatsAppService {
  constructor() {
    this.apiKey = process.env.INTERAKT_API_KEY;
    this.baseURL = 'https://api.interakt.ai/v1';
    this.webhookSecret = process.env.INTERAKT_WEBHOOK_SECRET;
  }

  // Send text message
  async sendMessage(phone, message, language = 'mr') {
    try {
      const response = await axios.post(`${this.baseURL}/message/send`, {
        phone: phone,
        message: message,
        language: language
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      return response.data;
    } catch (error) {
      console.error('Error sending WhatsApp message:', error);
      throw error;
    }
  }

  // Send template message
  async sendTemplate(phone, templateName, parameters = {}, language = 'mr') {
    try {
      const response = await axios.post(`${this.baseURL}/message/template`, {
        phone: phone,
        template_name: templateName,
        parameters: parameters,
        language: language
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      return response.data;
    } catch (error) {
      console.error('Error sending WhatsApp template:', error);
      throw error;
    }
  }

  // Send media message
  async sendMedia(phone, mediaUrl, mediaType, caption = '', language = 'mr') {
    try {
      const response = await axios.post(`${this.baseURL}/message/media`, {
        phone: phone,
        media_url: mediaUrl,
        media_type: mediaType,
        caption: caption,
        language: language
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      return response.data;
    } catch (error) {
      console.error('Error sending WhatsApp media:', error);
      throw error;
    }
  }

  // Handle incoming webhook
  async handleWebhook(payload) {
    try {
      const { type, data } = payload;

      switch (type) {
        case 'message_received':
          return await this.handleIncomingMessage(data);
        case 'message_delivered':
          return await this.handleMessageDelivered(data);
        case 'message_read':
          return await this.handleMessageRead(data);
        default:
          console.log('Unknown webhook type:', type);
          return { status: 'ignored' };
      }
    } catch (error) {
      console.error('Error handling webhook:', error);
      throw error;
    }
  }

  // Handle incoming message
  async handleIncomingMessage(data) {
    const { phone, message, media, location } = data;
    
    // Check if this is a new grievance or update to existing one
    const existingUser = await this.findUserByPhone(phone);
    
    if (existingUser && existingUser.activeGrievance) {
      // Handle update to existing grievance
      return await this.handleGrievanceUpdate(existingUser.activeGrievance, data);
    } else {
      // Handle new grievance
      return await this.handleNewGrievance(data);
    }
  }

  // Handle new grievance submission
  async handleNewGrievance(data) {
    const { phone, message, media, location } = data;
    
    // Extract information from message
    const extractedInfo = await this.extractGrievanceInfo(message, phone);
    
    // Send confirmation message
    const confirmationMessage = this.getConfirmationMessage(extractedInfo, 'mr');
    await this.sendMessage(phone, confirmationMessage, 'mr');
    
    // Create grievance in database
    const grievance = await this.createGrievanceFromWhatsApp(extractedInfo, data);
    
    return {
      status: 'success',
      grievance_id: grievance.id,
      ticket_id: grievance.ticket_id
    };
  }

  // Extract grievance information from message
  async extractGrievanceInfo(message, phone) {
    // Simple keyword extraction (in production, use NLP)
    const categories = {
      '‡§™‡§æ‡§£‡•Ä': 'water',
      '‡§∞‡§∏‡•ç‡§§‡§æ': 'road',
      '‡§µ‡•Ä‡§ú': 'electricity',
      '‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø': 'health',
      '‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ‡§§‡§æ': 'sanitation',
      '‡§™‡•ã‡§≤‡•Ä‡§∏': 'police',
      '‡§Æ‡§π‡§∏‡•Ç‡§≤': 'revenue',
      '‡§∂‡§ø‡§ï‡•ç‡§∑‡§£': 'education'
    };

    let category = 'other';
    let severity = 'medium';

    // Check for category keywords
    for (const [keyword, cat] of Object.entries(categories)) {
      if (message.includes(keyword)) {
        category = cat;
        break;
      }
    }

    // Check for severity indicators
    if (message.includes('‡§§‡§æ‡§§‡§°‡•Ä‡§ö‡•á') || message.includes('‡§ú‡§∞‡•Å‡§∞‡•Ä')) {
      severity = 'high';
    } else if (message.includes('‡§ï‡•ç‡§∞‡§ø‡§ü‡§ø‡§ï‡§≤') || message.includes('‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§®')) {
      severity = 'critical';
    }

    return {
      phone,
      message,
      category,
      severity,
      language: 'mr'
    };
  }

  // Get confirmation message in Marathi
  getConfirmationMessage(info, language) {
    const messages = {
      mr: `‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Ü‡§™‡§≤‡•Ä ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ ‡§Æ‡§ø‡§≥‡§æ‡§≤‡•Ä ‡§Ü‡§π‡•á. 
      
‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï: ${info.ticket_id || 'JD-MH-XXXX-XXX'}
‡§µ‡§ø‡§∑‡§Ø: ${info.category}
‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ: ${info.severity}

‡§Ü‡§Æ‡•ç‡§π‡•Ä ‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡•Ä‡§ö‡•Ä ‡§ö‡•å‡§ï‡§∂‡•Ä ‡§ï‡§∞‡•Ç‡§® ‡§≤‡§µ‡§ï‡§∞‡§ö ‡§ï‡§æ‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡•Ç. ‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ‡§≤‡§æ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§ü‡§™‡•ç‡§™‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü ‡§Æ‡§ø‡§≥‡§§ ‡§∞‡§æ‡§π‡•Ä‡§≤.

‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! üôè`,
      
      hi: `‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•Å‡§à ‡§π‡•à‡•§
      
‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ: ${info.ticket_id || 'JD-MH-XXXX-XXX'}
‡§µ‡§ø‡§∑‡§Ø: ${info.category}
‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ: ${info.severity}

‡§π‡§Æ ‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§ï‡•á ‡§ú‡§≤‡•ç‡§¶ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§ ‡§Ü‡§™‡§ï‡•ã ‡§π‡§∞ ‡§ö‡§∞‡§£ ‡§™‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§∞‡§π‡•á‡§ó‡§æ‡•§

‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! üôè`,
      
      en: `Hello! We have received your complaint.
      
Complaint Number: ${info.ticket_id || 'JD-MH-XXXX-XXX'}
Category: ${info.category}
Severity: ${info.severity}

We will investigate your complaint and take action soon. You will receive updates at every stage.

Thank you! üôè`
    };

    return messages[language] || messages.mr;
  }

  // Send status update to citizen
  async sendStatusUpdate(grievanceId, status, additionalInfo = {}) {
    try {
      const grievance = await this.getGrievanceDetails(grievanceId);
      if (!grievance) return;

      const message = this.getStatusUpdateMessage(grievance, status, additionalInfo);
      await this.sendMessage(grievance.citizen_phone, message, grievance.citizen_language);

      // Log the notification
      await createEvent(null, grievanceId, 'WHATSAPP_NOTIFICATION_SENT', {
        status,
        message,
        additional_info: additionalInfo
      }, null, 'system');

    } catch (error) {
      console.error('Error sending status update:', error);
    }
  }

  // Get status update message
  getStatusUpdateMessage(grievance, status, additionalInfo) {
    const statusMessages = {
      'INTAKE': {
        mr: `‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ${grievance.ticket_id} ‡§ö‡•Ä ‡§ö‡•å‡§ï‡§∂‡•Ä ‡§∏‡•Å‡§∞‡•Ç ‡§Ü‡§π‡•á. ‡§Ü‡§Æ‡§ö‡•Ä ‡§ü‡•Ä‡§Æ ‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡•Ä‡§ö‡•Ä ‡§§‡§™‡§æ‡§∏‡§£‡•Ä ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á.`,
        hi: `‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ${grievance.ticket_id} ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•à‡•§ ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§ü‡•Ä‡§Æ ‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•à‡•§`,
        en: `Complaint ${grievance.ticket_id} is under review. Our team is investigating your complaint.`
      },
      'APPROVED': {
        mr: `‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ${grievance.ticket_id} ‡§Æ‡§Ç‡§ú‡•Ç‡§∞ ‡§ù‡§æ‡§≤‡•Ä ‡§Ü‡§π‡•á. ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§µ‡§ø‡§≠‡§æ‡§ó‡§æ‡§ï‡§°‡•á ‡§™‡§§‡•ç‡§∞ ‡§™‡§æ‡§†‡§µ‡§≤‡•á ‡§ú‡§æ‡§§ ‡§Ü‡§π‡•á.`,
        hi: `‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ${grievance.ticket_id} ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§π‡•à‡•§ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§µ‡§ø‡§≠‡§æ‡§ó ‡§ï‡•ã ‡§™‡§§‡•ç‡§∞ ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§`,
        en: `Complaint ${grievance.ticket_id} has been approved. Letter is being sent to the concerned department.`
      },
      'DISPATCHED': {
        mr: `‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ${grievance.ticket_id} ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§µ‡§ø‡§≠‡§æ‡§ó‡§æ‡§ï‡§°‡•á ‡§™‡§æ‡§†‡§µ‡§≤‡•Ä ‡§ó‡•á‡§≤‡•Ä ‡§Ü‡§π‡•á. ‡§™‡§§‡•ç‡§∞ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï: ${additionalInfo.outward_no || 'N/A'}`,
        hi: `‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ${grievance.ticket_id} ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§µ‡§ø‡§≠‡§æ‡§ó ‡§ï‡•ã ‡§≠‡•á‡§ú‡•Ä ‡§ó‡§à ‡§π‡•à‡•§ ‡§™‡§§‡•ç‡§∞ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ: ${additionalInfo.outward_no || 'N/A'}`,
        en: `Complaint ${grievance.ticket_id} has been sent to the concerned department. Letter No: ${additionalInfo.outward_no || 'N/A'}`
      },
      'ACKNOWLEDGED': {
        mr: `‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ${grievance.ticket_id} ‡§µ‡§ø‡§≠‡§æ‡§ó‡§æ‡§®‡•á ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞‡§≤‡•Ä ‡§Ü‡§π‡•á. ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∏‡•Å‡§∞‡•Ç ‡§Ü‡§π‡•á.`,
        hi: `‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ${grievance.ticket_id} ‡§µ‡§ø‡§≠‡§æ‡§ó ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§ó‡§à ‡§π‡•à‡•§ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•à‡•§`,
        en: `Complaint ${grievance.ticket_id} has been acknowledged by the department. Work has started.`
      },
      'RESOLVED': {
        mr: `‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ${grievance.ticket_id} ‡§∏‡•ã‡§°‡§µ‡§≤‡•Ä ‡§ó‡•á‡§≤‡•Ä ‡§Ü‡§π‡•á. ‡§Ü‡§™‡§£ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®‡•Ä ‡§Ü‡§π‡§æ‡§§ ‡§ï‡§æ? üëç/üëé`,
        hi: `‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ${grievance.ticket_id} ‡§π‡§≤ ‡§ï‡•Ä ‡§ó‡§à ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§∏‡§Ç‡§§‡•Å‡§∑‡•ç‡§ü ‡§π‡•à‡§Ç? üëç/üëé`,
        en: `Complaint ${grievance.ticket_id} has been resolved. Are you satisfied? üëç/üëé`
      }
    };

    const messages = statusMessages[status];
    if (!messages) return '';

    return messages[grievance.citizen_language] || messages.mr;
  }

  // Send reminder message
  async sendReminder(grievanceId, reminderType) {
    try {
      const grievance = await this.getGrievanceDetails(grievanceId);
      if (!grievance) return;

      const message = this.getReminderMessage(grievance, reminderType);
      await this.sendMessage(grievance.citizen_phone, message, grievance.citizen_language);

    } catch (error) {
      console.error('Error sending reminder:', error);
    }
  }

  // Get reminder message
  getReminderMessage(grievance, reminderType) {
    const reminderMessages = {
      'acknowledgment': {
        mr: `‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ${grievance.ticket_id} ‡§∏‡§æ‡§†‡•Ä ‡§µ‡§ø‡§≠‡§æ‡§ó‡§æ‡§ï‡§°‡•Ç‡§® ‡§Ö‡§¶‡•ç‡§Ø‡§æ‡§™ ‡§™‡•Å‡§∑‡•ç‡§ü‡•Ä ‡§Æ‡§ø‡§≥‡§æ‡§≤‡•Ä ‡§®‡§æ‡§π‡•Ä. ‡§Ü‡§Æ‡•ç‡§π‡•Ä ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•ã‡§§.`,
        hi: `‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ${grievance.ticket_id} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§≠‡§æ‡§ó ‡§∏‡•á ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à‡•§ ‡§π‡§Æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§`,
        en: `No acknowledgment received yet for complaint ${grievance.ticket_id}. We are following up.`
      },
      'resolution': {
        mr: `‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ${grievance.ticket_id} ‡§∏‡§æ‡§†‡•Ä ‡§Ö‡§¶‡•ç‡§Ø‡§æ‡§™ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ù‡§æ‡§≤‡•á ‡§®‡§æ‡§π‡•Ä. ‡§Ü‡§Æ‡•ç‡§π‡•Ä ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•ã‡§§.`,
        hi: `‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ${grievance.ticket_id} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§™‡•Ç‡§∞‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü ‡§π‡•à‡•§ ‡§π‡§Æ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§`,
        en: `Work not completed yet for complaint ${grievance.ticket_id}. We are monitoring.`
      }
    };

    const messages = reminderMessages[reminderType];
    if (!messages) return '';

    return messages[grievance.citizen_language] || messages.mr;
  }

  // Helper methods
  async findUserByPhone(phone) {
    // Implementation to find user by phone
    // This would query your database
    return null;
  }

  async createGrievanceFromWhatsApp(info, data) {
    // Implementation to create grievance from WhatsApp data
    // This would use your grievance creation logic
    return null;
  }

  async getGrievanceDetails(grievanceId) {
    // Implementation to get grievance details
    // This would query your database
    return null;
  }
}

module.exports = new WhatsAppService();
